"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-fallback-key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1').split(',')
# ALLOWED_HOSTS = ["*"]


# ===================================================================
# PRODUCTION SECURITY SETTINGS
# ===================================================================

# HTTPS/SSL Configuration
# Auto-enable in production (DEBUG=False), disable in development (DEBUG=True)
SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=not DEBUG, cast=bool)
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# HTTP Strict Transport Security (HSTS)
# Tells browsers to only use HTTPS for 1 year (31536000 seconds)
SECURE_HSTS_SECONDS = config('SECURE_HSTS_SECONDS', default=31536000 if not DEBUG else 0, cast=int)
SECURE_HSTS_INCLUDE_SUBDOMAINS = config('SECURE_HSTS_INCLUDE_SUBDOMAINS', default=not DEBUG, cast=bool)
SECURE_HSTS_PRELOAD = config('SECURE_HSTS_PRELOAD', default=not DEBUG, cast=bool)

# Cookie Security
# Session cookies only transmitted over HTTPS in production
SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=not DEBUG, cast=bool)
SESSION_COOKIE_HTTPONLY = True  # Prevent JavaScript access to session cookies
SESSION_COOKIE_SAMESITE = 'Lax'  # CSRF protection

# CSRF cookies only transmitted over HTTPS in production
CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=not DEBUG, cast=bool)
CSRF_COOKIE_HTTPONLY = True  # Prevent JavaScript access to CSRF tokens
CSRF_COOKIE_SAMESITE = 'Lax'  # CSRF protection

# Browser Security Headers
SECURE_BROWSER_XSS_FILTER = True  # Enable browser XSS protection
SECURE_CONTENT_TYPE_NOSNIFF = True  # Prevent MIME type sniffing
X_FRAME_OPTIONS = 'DENY'  # Prevent clickjacking attacks

# Additional Security
SECURE_REFERRER_POLICY = 'same-origin'  # Control referrer information

# Ensure SECRET_KEY is set in production
if not DEBUG and SECRET_KEY == 'django-insecure-fallback-key':
    raise ValueError(
        "SECRET_KEY must be set to a secure random value in production. "
        "Add SECRET_KEY to your environment variables."
    )


# ===================================================================
# LOGGING CONFIGURATION
# ===================================================================

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[{levelname}] {asctime} {name} - {message}',
            'style': '{',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'filters': {
        'sensitive_data_filter': {
            '()': 'utils.logging.SensitiveDataFilter',
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
            'filters': ['sensitive_data_filter'],
        },
        'file_api': {
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'api.log',
            'maxBytes': 1024 * 1024 * 10,  # 10 MB
            'backupCount': 5,
            'formatter': 'verbose',
            'filters': ['sensitive_data_filter'],
        },
        'file_errors': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': BASE_DIR / 'logs' / 'errors.log',
            'maxBytes': 1024 * 1024 * 10,  # 10 MB
            'backupCount': 5,
            'formatter': 'verbose',
            'filters': ['sensitive_data_filter'],
        },
    },
    'loggers': {
        'api': {
            'handlers': ['console', 'file_api', 'file_errors'],
            'level': 'INFO',
            'propagate': False,
        },
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
        },
    },
}


# Application definition

INSTALLED_APPS = [
    'axes',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'corsheaders',
    'apps.users',
    'apps.listings',
    'apps.wallet',
    'apps.notifications',
    'apps.otp',            # Added OTP app
    'apps.referral',       # Added referral app
    'apps.marketplace',    # Added marketplace app
    "cloudinary", 
    "cloudinary_storage",
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'axes.middleware.AxesMiddleware',
    'utils.logging.RequestResponseLoggingMiddleware',  # Request/Response logging
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

import sys

# Check if we should use PostgreSQL or SQLite
USE_POSTGRES = config('USE_POSTGRES', default='False', cast=bool)

if USE_POSTGRES:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': config('DATABASE_NAME', default='wasteworth_dev'),
            'USER': config('DATABASE_USER', default='avnadmin'),
            'PASSWORD': config('DATABASE_PASSWORD', default='localpass'),
            'HOST': config('DATABASE_HOST', default='localhost'),
            'PORT': config('DATABASE_PORT', default='5432'),
            'OPTIONS': {
                'sslmode': config('SSL_MODE', default='disable'),
            } if config('SSL_MODE', default='disable') != 'disable' else {},
        }
    }
else:
    # Use SQLite for local development
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }

# Use SQLite for testing
if 'test' in sys.argv:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': ':memory:'
    }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom User Model
AUTH_USER_MODEL = 'users.User'

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesStandaloneBackend',
    'django.contrib.auth.backends.ModelBackend',
]

# REST Framework Configuration
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.AllowAny'
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    'DEFAULT_PARSER_CLASSES': [
        'rest_framework.parsers.JSONParser',
    ],
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'EXCEPTION_HANDLER': 'utils.error_handler.custom_exception_handler',
}

# JWT Configuration
from datetime import timedelta
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=14),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'USER_ID_FIELD': 'id',
    'USER_ID_CLAIM': 'user_id',
}

# CORS Configuration
# Development origins
CORS_ALLOWED_ORIGINS_DEV = [
    "http://localhost:3000",  # React default
    "http://127.0.0.1:3000",
    "http://localhost:3001",  # Alternative React port
    "http://127.0.0.1:3001",
    "http://localhost:5173",  # Vite default
    "http://127.0.0.1:5173",
]

# Production origins (configure via environment variable)
CORS_ALLOWED_ORIGINS_PROD = config('CORS_ALLOWED_ORIGINS', default='', cast=lambda v: [s.strip() for s in v.split(',') if s.strip()])

# Use production origins if available, otherwise use development origins
CORS_ALLOWED_ORIGINS = CORS_ALLOWED_ORIGINS_PROD if CORS_ALLOWED_ORIGINS_PROD else CORS_ALLOWED_ORIGINS_DEV

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# Additional CORS settings for better compatibility
CORS_ALLOW_ALL_ORIGINS = False  # Keep security by only allowing specific origins
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# Ensure preflight requests are handled properly
CORS_PREFLIGHT_MAX_AGE = 86400

# Email Backend Configuration
EMAIL_BACKEND = config('EMAIL_BACKEND', default='utils.email_backend.SMTPBackendWithTimeout')
EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
EMAIL_PORT = config('EMAIL_PORT', default=465, cast=int)
EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=False, cast=bool)
EMAIL_USE_SSL = config('EMAIL_USE_SSL', default=True, cast=bool)
EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')

DEFAULT_FROM_EMAIL = config('DEFAULT_FROM_EMAIL', default='no-reply@wasteworth.com')

# Email timeout settings (2 minutes for SMTP operations)
EMAIL_TIMEOUT = config('EMAIL_TIMEOUT', default=120, cast=int)

# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Redis Queue Configuration - Temporarily commented out
RQ_QUEUES = {
    'default': {
        'HOST': config('REDIS_HOST', default='localhost'),
        'PORT': config('REDIS_PORT', default=6379, cast=int),
        'DB': 0,
        'PASSWORD': config('REDIS_PASSWORD', default=''),
        'DEFAULT_TIMEOUT': 360,
    },
    'high': {
        'HOST': config('REDIS_HOST', default='localhost'),
        'PORT': config('REDIS_PORT', default=6379, cast=int),
        'DB': 0,
        'PASSWORD': config('REDIS_PASSWORD', default=''),
        'DEFAULT_TIMEOUT': 500,
    },
    'low': {
        'HOST': config('REDIS_HOST', default='localhost'),
        'PORT': config('REDIS_PORT', default=6379, cast=int),
        'DB': 0,
        'PASSWORD': config('REDIS_PASSWORD', default=''),
        'DEFAULT_TIMEOUT': 500,
    }
}

# ------------------------------
# Django-axes Configuration (Brute-force Protection)
# ------------------------------
AXES_FAILURE_LIMIT = 5  # Lock after 5 failed attempts
AXES_COOLOFF_TIME = timedelta(minutes=30)  # 30-minute lockout
AXES_LOCKOUT_PARAMETERS = ['username', 'ip_address']  # Track by username + IP
AXES_USERNAME_FORM_FIELD = 'email'  # Our login form uses email field
AXES_ENABLE_ADMIN = True  # Enable admin interface
AXES_ONLY_ALLOW_FAILURES_ON_POST = True  # Only count POST requests
AXES_RESET_ON_SUCCESS = True  # Reset counter on successful login
AXES_VERBOSE = True  # Log axes events
AXES_LOCKOUT_MESSAGE = 'Too many failed login attempts. Your account has been temporarily locked for security. Please try again in 30 minutes.'

CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': f"redis://{config('REDIS_HOST', default='localhost')}:{config('REDIS_PORT', default=6379, cast=int)}/1",
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
            'PASSWORD': config('REDIS_PASSWORD', default=''),
            'SOCKET_CONNECT_TIMEOUT': 5,
            'SOCKET_TIMEOUT': 5,
        },
        'TIMEOUT': 300,  # 5 minutes default timeout
    }
}

# Fallback to database cache if Redis is not available
AXES_CACHE = 'default'

# ------------------------------
# Node.js Service Configuration
# ------------------------------
NODE_SERVICE_URL = config('NODE_SERVICE_URL', default='http://localhost:3000')
INTERNAL_API_KEY = config('INTERNAL_API_KEY', default='')
